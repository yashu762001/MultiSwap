{
  "address": "0x30d0667D14B92426A925d83c8890D474e0D39fC1",
  "abi": [
    {
      "inputs": [],
      "name": "addEthereumLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount2",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "symbol2",
          "type": "string"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol2",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol3",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "per1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "per2",
          "type": "uint256"
        }
      ],
      "name": "checkTokensYouGetForMultipleSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol2",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "checkTokensYouGetForSingleSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "token",
          "type": "string"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSymbolValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSymbolsValue",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidityPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x350104ba649f00a3af5dd7aff3daa413eef4d57c4ce2e45c62e0222650104a6d",
  "receipt": {
    "to": null,
    "from": "0xAf96A982239392DBC1EEb440cf762C299ecEd78f",
    "contractAddress": "0x30d0667D14B92426A925d83c8890D474e0D39fC1",
    "transactionIndex": 5,
    "gasUsed": "3312064",
    "logsBloom": "0x
    "blockHash": "0x43e247f9ea560dc13a3ca1c60b3a96746fe4095c419247963529f739e447143c",
    "transactionHash": "0x350104ba649f00a3af5dd7aff3daa413eef4d57c4ce2e45c62e0222650104a6d",
    "logs": [],
    "blockNumber": 32384013,
    "cumulativeGasUsed": "6114168",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3723db93b7e2d1a00d17d190f5a9dc7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"addEthereumLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol3\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"per1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"per2\",\"type\":\"uint256\"}],\"name\":\"checkTokensYouGetForMultipleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"checkTokensYouGetForSingleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSymbolsValue\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multiswap.sol\":\"Multiswap\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Multiswap.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n\\n// Within each liquidity pools value of tokens added is equal. The count of tokens might not be equal but the total value is same.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Multiswap {\\n    mapping(string => mapping(string => uint256[])) public liquidityPools;\\n    mapping(string => address) public tokens;\\n    uint256 private symbol_to_return;\\n    uint256 private symbol2_to_return;\\n    uint256 private symbol3_to_return;\\n    string eth = \\\"ETH\\\";\\n\\n    struct LocalVariables {\\n        uint256 eth1_supply;\\n        uint256 eth2_supply;\\n        uint256 eth3_supply;\\n        uint256 symbol1_supply;\\n        uint256 symbol2_supply;\\n        uint256 symbol3_supply;\\n    }\\n\\n    function getSymbolValue() public view returns (uint256) {\\n        return symbol_to_return;\\n    }\\n\\n    function getSymbolsValue() public view returns (uint256[2] memory) {\\n        uint256[2] memory l1;\\n        l1[0] = symbol2_to_return;\\n        l1[1] = symbol3_to_return;\\n        return l1;\\n    }\\n\\n    function addEthereumLiquidity() public payable {}\\n\\n    function addLiquidity(\\n        address token2,\\n        uint256 amount1,\\n        uint256 amount2,\\n        string memory symbol2\\n    ) external {\\n        require(amount1 > 0, \\\"Cannot create a pool with 0 tokens\\\");\\n\\n        IERC20 _token2 = IERC20(token2);\\n\\n        _token2.transferFrom(msg.sender, address(this), amount2);\\n\\n        liquidityPools[eth][symbol2].push(amount1);\\n        liquidityPools[eth][symbol2].push(amount2);\\n\\n        liquidityPools[symbol2][eth].push(amount2);\\n        liquidityPools[symbol2][eth].push(amount1);\\n\\n        tokens[symbol2] = token2;\\n    }\\n\\n    // trying to swap symbol1 with symbol2 :\\n\\n    function checkTokensYouGetForSingleSwap(\\n        string memory symbol1,\\n        string memory symbol2,\\n        uint256 amount1\\n    ) external {\\n        if (\\n            keccak256(abi.encodePacked(symbol1)) !=\\n            keccak256(abi.encodePacked(eth))\\n        ) {\\n            require(\\n                liquidityPools[symbol1][eth].length > 0,\\n                \\\"Liquidity for this token not present\\\"\\n            );\\n            IERC20 _token = IERC20(tokens[symbol1]);\\n            _token.transferFrom(msg.sender, address(this), amount1);\\n\\n            if (\\n                keccak256(abi.encodePacked(symbol2)) !=\\n                keccak256(abi.encodePacked(eth))\\n            ) {\\n                require(\\n                    liquidityPools[symbol2][eth].length > 0,\\n                    \\\"Liquidity for this token not present\\\"\\n                );\\n\\n                // Let's route :\\n                uint256 symbol1_supply = liquidityPools[symbol1][eth][0];\\n                uint256 eth1_supply = liquidityPools[symbol1][eth][1];\\n\\n                uint256 symbol2_supply = liquidityPools[symbol2][eth][0];\\n                uint256 eth2_supply = liquidityPools[symbol2][eth][1];\\n\\n                uint256 symbol2_to_be_given = (eth1_supply *\\n                    amount1 *\\n                    symbol2_supply) / (symbol1_supply * eth2_supply);\\n\\n                liquidityPools[symbol1][eth][0] += (amount1);\\n                liquidityPools[symbol2][eth][0] -= (symbol2_to_be_given);\\n\\n                liquidityPools[eth][symbol1][1] += (amount1);\\n                liquidityPools[eth][symbol2][1] -= (symbol2_to_be_given);\\n\\n                symbol_to_return = symbol2_to_be_given;\\n            } else {\\n                // Getting ETH in return for some ERC20 Token :\\n                uint256 symbol1_supply = liquidityPools[symbol1][eth][0];\\n                uint256 symbol2_supply = liquidityPools[symbol1][eth][1];\\n\\n                uint256 eth_to_be_given = (symbol2_supply * amount1) /\\n                    (symbol1_supply);\\n\\n                liquidityPools[symbol1][eth][0] += (amount1);\\n                liquidityPools[symbol1][eth][1] -= eth_to_be_given;\\n\\n                liquidityPools[eth][symbol1][0] -= eth_to_be_given;\\n                liquidityPools[eth][symbol1][1] += (amount1);\\n\\n                symbol_to_return = eth_to_be_given;\\n            }\\n        } else {\\n            require(\\n                liquidityPools[symbol2][eth].length > 0,\\n                \\\"Liquidity for this token is not present\\\"\\n            );\\n\\n            uint256 symbol1_supply = liquidityPools[symbol1][symbol2][0];\\n            uint256 symbol2_supply = liquidityPools[symbol1][symbol2][1];\\n\\n            uint256 symbol2_to_be_given = (symbol2_supply * amount1) /\\n                (symbol1_supply);\\n\\n            liquidityPools[eth][symbol2][0] += (amount1);\\n            liquidityPools[eth][symbol2][1] -= symbol2_to_be_given;\\n\\n            liquidityPools[symbol2][eth][0] -= symbol2_to_be_given;\\n            liquidityPools[symbol2][eth][1] += (amount1);\\n\\n            symbol_to_return = symbol2_to_be_given;\\n        }\\n    }\\n\\n    function update(\\n        string memory s1,\\n        string memory s2,\\n        uint256 amount,\\n        uint256 ind,\\n        string memory operation\\n    ) internal {\\n        if (\\n            keccak256(abi.encodePacked(operation)) ==\\n            keccak256(abi.encodePacked(\\\"add\\\"))\\n        ) {\\n            liquidityPools[s1][s2][ind] += amount;\\n        } else {\\n            liquidityPools[s1][s2][ind] -= amount;\\n        }\\n    }\\n\\n    function checkTokensYouGetForMultipleSwap(\\n        string memory symbol1,\\n        string memory symbol2,\\n        string memory symbol3,\\n        uint256 amount1,\\n        uint256 per1,\\n        uint256 per2\\n    ) external {\\n        LocalVariables memory local;\\n        // we need percentage 1 amount of total cost of symbol1 to be covered by symbol2 and remaining by symbol3\\n\\n        if (\\n            keccak256(abi.encodePacked(symbol1)) ==\\n            keccak256(abi.encodePacked(eth))\\n        ) {\\n            local.eth1_supply = liquidityPools[eth][symbol2][0];\\n            local.symbol2_supply = liquidityPools[eth][symbol2][1];\\n\\n            local.eth2_supply = liquidityPools[eth][symbol3][0];\\n            local.symbol3_supply = liquidityPools[eth][symbol3][1];\\n\\n            uint256 symbol2_to_be_given = (local.symbol2_supply *\\n                amount1 *\\n                per1) / (local.eth1_supply * 100);\\n            uint256 symbol3_to_be_given = (local.symbol3_supply *\\n                amount1 *\\n                per2) / (local.eth2_supply * 100);\\n\\n            liquidityPools[eth][symbol2][0] += ((amount1 * per1) / 100);\\n            liquidityPools[eth][symbol2][1] -= symbol2_to_be_given;\\n\\n            liquidityPools[symbol2][eth][0] -= symbol2_to_be_given;\\n            liquidityPools[symbol2][eth][1] += ((amount1 * per1) / 100);\\n\\n            liquidityPools[eth][symbol3][0] += ((amount1 * per2) / 100);\\n            liquidityPools[eth][symbol3][1] -= symbol3_to_be_given;\\n\\n            liquidityPools[symbol3][eth][0] -= symbol3_to_be_given;\\n            liquidityPools[symbol3][eth][1] += ((amount1 * per2) / 100);\\n\\n            symbol2_to_return = symbol2_to_be_given;\\n            symbol3_to_return = symbol3_to_be_given;\\n        } else {\\n            IERC20 __token = IERC20(tokens[symbol1]);\\n            __token.transferFrom(msg.sender, address(this), amount1);\\n\\n            if (\\n                keccak256(abi.encodePacked(symbol2)) ==\\n                keccak256(abi.encodePacked(eth))\\n            ) {\\n                local.eth1_supply = liquidityPools[eth][symbol1][0];\\n                local.symbol1_supply = liquidityPools[eth][symbol1][1];\\n\\n                local.eth2_supply = liquidityPools[eth][symbol3][0];\\n                local.symbol3_supply = liquidityPools[eth][symbol3][1];\\n\\n                uint256 eth_to_be_given = (local.eth1_supply * per1 * amount1) /\\n                    (100 * local.symbol1_supply);\\n                uint256 symbol3_to_be_given = (local.eth1_supply *\\n                    local.symbol3_supply *\\n                    per2 *\\n                    amount1) / (100 * local.symbol1_supply * local.eth2_supply);\\n\\n                liquidityPools[eth][symbol1][0] -= eth_to_be_given;\\n                liquidityPools[eth][symbol1][1] += (amount1);\\n\\n                liquidityPools[symbol1][eth][0] += (amount1);\\n                liquidityPools[symbol1][eth][1] -= eth_to_be_given;\\n\\n                liquidityPools[eth][symbol3][1] -= symbol3_to_be_given;\\n\\n                liquidityPools[symbol3][eth][0] -= symbol3_to_be_given;\\n\\n                symbol2_to_return = eth_to_be_given;\\n                symbol3_to_return = symbol3_to_be_given;\\n            } else if (\\n                keccak256(abi.encodePacked(symbol3)) ==\\n                keccak256(abi.encodePacked(eth))\\n            ) {\\n                local.eth1_supply = liquidityPools[eth][symbol1][0];\\n                local.symbol1_supply = liquidityPools[eth][symbol1][1];\\n\\n                uint256 eth2_supply = liquidityPools[eth][symbol2][0];\\n                uint256 symbol2_supply = liquidityPools[eth][symbol2][1];\\n\\n                uint256 eth_to_be_given = (local.eth1_supply * per2 * amount1) /\\n                    (100 * local.symbol1_supply);\\n                uint256 symbol2_to_be_given = (local.eth1_supply *\\n                    symbol2_supply *\\n                    per1 *\\n                    amount1) / (100 * local.symbol1_supply * eth2_supply);\\n\\n                liquidityPools[eth][symbol1][0] -= eth_to_be_given;\\n                liquidityPools[eth][symbol1][1] += (amount1);\\n\\n                liquidityPools[symbol1][eth][0] += (amount1);\\n                liquidityPools[symbol1][eth][1] -= eth_to_be_given;\\n\\n                liquidityPools[eth][symbol2][1] -= symbol2_to_be_given;\\n\\n                liquidityPools[symbol2][eth][0] -= symbol2_to_be_given;\\n\\n                symbol2_to_return = symbol2_to_be_given;\\n                symbol3_to_return = eth_to_be_given;\\n            } else {\\n                local.eth1_supply = liquidityPools[eth][symbol1][0];\\n                local.symbol1_supply = liquidityPools[eth][symbol1][1];\\n\\n                local.eth2_supply = liquidityPools[eth][symbol2][0];\\n                local.symbol2_supply = liquidityPools[eth][symbol2][1];\\n\\n                local.eth3_supply = liquidityPools[eth][symbol3][0];\\n                local.symbol3_supply = liquidityPools[eth][symbol3][1];\\n\\n                uint256 symbol2_to_be_given = (amount1 *\\n                    per1 *\\n                    local.eth1_supply);\\n                symbol2_to_be_given =\\n                    (symbol2_to_be_given * local.symbol2_supply) /\\n                    (100 * local.symbol1_supply * local.eth2_supply);\\n                uint256 symbol3_to_be_given = (amount1 *\\n                    per2 *\\n                    local.eth1_supply);\\n                symbol3_to_be_given =\\n                    (symbol3_to_be_given * local.symbol3_supply) /\\n                    (100 * local.symbol1_supply * local.eth3_supply);\\n\\n                uint256 val = (amount1);\\n                update(eth, symbol1, val, 1, \\\"add\\\");\\n                update(symbol1, eth, val, 0, \\\"add\\\");\\n\\n                update(eth, symbol2, symbol2_to_be_given, 1, \\\"sub\\\");\\n                update(symbol2, eth, symbol2_to_be_given, 0, \\\"sub\\\");\\n\\n                update(eth, symbol3, symbol3_to_be_given, 1, \\\"sub\\\");\\n                update(symbol3, eth, symbol3_to_be_given, 0, \\\"sub\\\");\\n\\n                symbol2_to_return = symbol2_to_be_given;\\n                symbol3_to_return = symbol3_to_be_given;\\n            }\\n        }\\n    }\\n\\n    function payEther(uint256 amount) public {\\n        (bool succ, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n    }\\n\\n    function payToken(string memory symbol, uint256 amount) public {\\n        IERC20(tokens[symbol]).transferFrom(address(this), msg.sender, amount);\\n    }\\n\\n    function getAddress(string memory token) public view returns (address) {\\n        return tokens[token];\\n    }\\n}\\n\",\"keccak256\":\"0xab13e8befc5bae1e768eec23b53bc3669b19144a6dfc65c23ecc622ca75f4994\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80634b022418116100645780634b022418146101825780634fe4c8f1146101ad578063bf40fac1146101d6578063c1d8bcbe14610213578063d50a788d1461021d578063f223dfed1461025a5761009c565b806304c2320b146100a157806307596869146100de57806318b749c4146101075780632c1c7da2146101305780633f829bae14610159575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190612fb1565b610285565b6040516100d59190613442565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190613166565b6102ce565b005b34801561011357600080fd5b5061012e600480360381019061012991906131c2565b6103a0565b005b34801561013c57600080fd5b50610157600480360381019061015291906130db565b610410565b005b34801561016557600080fd5b50610180600480360381019061017b9190612f01565b610fb6565b005b34801561018e57600080fd5b5061019761127a565b6040516101a49190613494565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf9190612ffa565b6112d1565b005b3480156101e257600080fd5b506101fd60048036038101906101f89190612fb1565b612c03565b60405161020a9190613442565b60405180910390f35b61021b612c4b565b005b34801561022957600080fd5b50610244600480360381019061023f91906130db565b612c4d565b604051610251919061350f565b60405180910390f35b34801561026657600080fd5b5061026f612cb7565b60405161027c919061350f565b60405180910390f35b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001826040516102de91906133ea565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b81526004016103499392919061345d565b602060405180830381600087803b15801561036357600080fd5b505af1158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190612f84565b505050565b60003373ffffffffffffffffffffffffffffffffffffffff16826040516103c69061342d565b60006040518083038185875af1925050503d8060008114610403576040519150601f19603f3d011682016040523d82523d6000602084013e610408565b606091505b505090505050565b60056040516020016104229190613401565b604051602081830303815290604052805190602001208360405160200161044991906133ea565b6040516020818303038152906040528051906020012014610c99576000808460405161047591906133ea565b908152602001604051809103902060056040516104929190613401565b908152602001604051809103902080549050116104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906134cf565b60405180910390fd5b60006001846040516104f691906133ea565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105649392919061345d565b602060405180830381600087803b15801561057e57600080fd5b505af1158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b69190612f84565b5060056040516020016105c99190613401565b60405160208183030381529060405280519060200120836040516020016105f091906133ea565b60405160208183030381529060405280519060200120146109f9576000808460405161061c91906133ea565b908152602001604051809103902060056040516106399190613401565b9081526020016040518091039020805490501161068b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610682906134cf565b60405180910390fd5b6000808560405161069c91906133ea565b908152602001604051809103902060056040516106b99190613401565b90815260200160405180910390206000815481106106da576106d9613883565b5b90600052602060002001549050600080866040516106f891906133ea565b908152602001604051809103902060056040516107159190613401565b908152602001604051809103902060018154811061073657610735613883565b5b906000526020600020015490506000808660405161075491906133ea565b908152602001604051809103902060056040516107719190613401565b908152602001604051809103902060008154811061079257610791613883565b5b90600052602060002001549050600080876040516107b091906133ea565b908152602001604051809103902060056040516107cd9190613401565b90815260200160405180910390206001815481106107ee576107ed613883565b5b9060005260206000200154905060008185610809919061367b565b838886610816919061367b565b610820919061367b565b61082a919061364a565b90508660008a60405161083d91906133ea565b9081526020016040518091039020600560405161085a9190613401565b908152602001604051809103902060008154811061087b5761087a613883565b5b90600052602060002001600082825461089491906135f4565b92505081905550806000896040516108ac91906133ea565b908152602001604051809103902060056040516108c99190613401565b90815260200160405180910390206000815481106108ea576108e9613883565b5b90600052602060002001600082825461090391906136d5565b92505081905550866000600560405161091c9190613401565b90815260200160405180910390208a60405161093891906133ea565b908152602001604051809103902060018154811061095957610958613883565b5b90600052602060002001600082825461097291906135f4565b92505081905550806000600560405161098b9190613401565b9081526020016040518091039020896040516109a791906133ea565b90815260200160405180910390206001815481106109c8576109c7613883565b5b9060005260206000200160008282546109e191906136d5565b92505081905550806002819055505050505050610c93565b60008085604051610a0a91906133ea565b90815260200160405180910390206005604051610a279190613401565b9081526020016040518091039020600081548110610a4857610a47613883565b5b9060005260206000200154905060008086604051610a6691906133ea565b90815260200160405180910390206005604051610a839190613401565b9081526020016040518091039020600181548110610aa457610aa3613883565b5b906000526020600020015490506000828583610ac0919061367b565b610aca919061364a565b905084600088604051610add91906133ea565b90815260200160405180910390206005604051610afa9190613401565b9081526020016040518091039020600081548110610b1b57610b1a613883565b5b906000526020600020016000828254610b3491906135f4565b9250508190555080600088604051610b4c91906133ea565b90815260200160405180910390206005604051610b699190613401565b9081526020016040518091039020600181548110610b8a57610b89613883565b5b906000526020600020016000828254610ba391906136d5565b925050819055508060006005604051610bbc9190613401565b908152602001604051809103902088604051610bd891906133ea565b9081526020016040518091039020600081548110610bf957610bf8613883565b5b906000526020600020016000828254610c1291906136d5565b925050819055508460006005604051610c2b9190613401565b908152602001604051809103902088604051610c4791906133ea565b9081526020016040518091039020600181548110610c6857610c67613883565b5b906000526020600020016000828254610c8191906135f4565b92505081905550806002819055505050505b50610fb1565b60008083604051610caa91906133ea565b90815260200160405180910390206005604051610cc79190613401565b90815260200160405180910390208054905011610d19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d10906134ef565b60405180910390fd5b60008084604051610d2a91906133ea565b908152602001604051809103902083604051610d4691906133ea565b9081526020016040518091039020600081548110610d6757610d66613883565b5b9060005260206000200154905060008085604051610d8591906133ea565b908152602001604051809103902084604051610da191906133ea565b9081526020016040518091039020600181548110610dc257610dc1613883565b5b906000526020600020015490506000828483610dde919061367b565b610de8919061364a565b90508360006005604051610dfc9190613401565b908152602001604051809103902086604051610e1891906133ea565b9081526020016040518091039020600081548110610e3957610e38613883565b5b906000526020600020016000828254610e5291906135f4565b925050819055508060006005604051610e6b9190613401565b908152602001604051809103902086604051610e8791906133ea565b9081526020016040518091039020600181548110610ea857610ea7613883565b5b906000526020600020016000828254610ec191906136d5565b9250508190555080600086604051610ed991906133ea565b90815260200160405180910390206005604051610ef69190613401565b9081526020016040518091039020600081548110610f1757610f16613883565b5b906000526020600020016000828254610f3091906136d5565b9250508190555083600086604051610f4891906133ea565b90815260200160405180910390206005604051610f659190613401565b9081526020016040518091039020600181548110610f8657610f85613883565b5b906000526020600020016000828254610f9f91906135f4565b92505081905550806002819055505050505b505050565b60008311610ff9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff0906134af565b60405180910390fd5b60008490508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161103b9392919061345d565b602060405180830381600087803b15801561105557600080fd5b505af1158015611069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108d9190612f84565b506000600560405161109f9190613401565b9081526020016040518091039020826040516110bb91906133ea565b9081526020016040518091039020849080600181540180825580915050600190039060005260206000200160009091909190915055600060056040516111019190613401565b90815260200160405180910390208260405161111d91906133ea565b908152602001604051809103902083908060018154018082558091505060019003906000526020600020016000909190919091505560008260405161116291906133ea565b9081526020016040518091039020600560405161117f9190613401565b90815260200160405180910390208390806001815401808255809150506001900390600052602060002001600090919091909150556000826040516111c491906133ea565b908152602001604051809103902060056040516111e19190613401565b90815260200160405180910390208490806001815401808255809150506001900390600052602060002001600090919091909150558460018360405161122791906133ea565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b611282612dfa565b61128a612dfa565b600354816000600281106112a1576112a0613883565b5b602002018181525050600454816001600281106112c1576112c0613883565b5b6020020181815250508091505090565b6112d9612e1c565b60056040516020016112eb9190613401565b604051602081830303815290604052805190602001208760405160200161131291906133ea565b604051602081830303815290604052805190602001201415611913576000600560405161133f9190613401565b90815260200160405180910390208660405161135b91906133ea565b908152602001604051809103902060008154811061137c5761137b613883565b5b9060005260206000200154816000018181525050600060056040516113a19190613401565b9081526020016040518091039020866040516113bd91906133ea565b90815260200160405180910390206001815481106113de576113dd613883565b5b9060005260206000200154816080018181525050600060056040516114039190613401565b90815260200160405180910390208560405161141f91906133ea565b90815260200160405180910390206000815481106114405761143f613883565b5b9060005260206000200154816020018181525050600060056040516114659190613401565b90815260200160405180910390208560405161148191906133ea565b90815260200160405180910390206001815481106114a2576114a1613883565b5b90600052602060002001548160a00181815250506000606482600001516114c9919061367b565b848684608001516114da919061367b565b6114e4919061367b565b6114ee919061364a565b9050600060648360200151611503919061367b565b84878560a00151611514919061367b565b61151e919061367b565b611528919061364a565b905060648587611538919061367b565b611542919061364a565b600060056040516115539190613401565b90815260200160405180910390208960405161156f91906133ea565b90815260200160405180910390206000815481106115905761158f613883565b5b9060005260206000200160008282546115a991906135f4565b9250508190555081600060056040516115c29190613401565b9081526020016040518091039020896040516115de91906133ea565b90815260200160405180910390206001815481106115ff576115fe613883565b5b90600052602060002001600082825461161891906136d5565b925050819055508160008960405161163091906133ea565b9081526020016040518091039020600560405161164d9190613401565b908152602001604051809103902060008154811061166e5761166d613883565b5b90600052602060002001600082825461168791906136d5565b925050819055506064858761169c919061367b565b6116a6919061364a565b6000896040516116b691906133ea565b908152602001604051809103902060056040516116d39190613401565b90815260200160405180910390206001815481106116f4576116f3613883565b5b90600052602060002001600082825461170d91906135f4565b9250508190555060648487611722919061367b565b61172c919061364a565b6000600560405161173d9190613401565b90815260200160405180910390208860405161175991906133ea565b908152602001604051809103902060008154811061177a57611779613883565b5b90600052602060002001600082825461179391906135f4565b9250508190555080600060056040516117ac9190613401565b9081526020016040518091039020886040516117c891906133ea565b90815260200160405180910390206001815481106117e9576117e8613883565b5b90600052602060002001600082825461180291906136d5565b925050819055508060008860405161181a91906133ea565b908152602001604051809103902060056040516118379190613401565b908152602001604051809103902060008154811061185857611857613883565b5b90600052602060002001600082825461187191906136d5565b9250508190555060648487611886919061367b565b611890919061364a565b6000886040516118a091906133ea565b908152602001604051809103902060056040516118bd9190613401565b90815260200160405180910390206001815481106118de576118dd613883565b5b9060005260206000200160008282546118f791906135f4565b9250508190555081600381905550806004819055505050612bfa565b600060018860405161192591906133ea565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016119939392919061345d565b602060405180830381600087803b1580156119ad57600080fd5b505af11580156119c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e59190612f84565b5060056040516020016119f89190613401565b6040516020818303038152906040528051906020012087604051602001611a1f91906133ea565b604051602081830303815290604052805190602001201415611f045760006005604051611a4c9190613401565b908152602001604051809103902088604051611a6891906133ea565b9081526020016040518091039020600081548110611a8957611a88613883565b5b906000526020600020015482600001818152505060006005604051611aae9190613401565b908152602001604051809103902088604051611aca91906133ea565b9081526020016040518091039020600181548110611aeb57611aea613883565b5b906000526020600020015482606001818152505060006005604051611b109190613401565b908152602001604051809103902086604051611b2c91906133ea565b9081526020016040518091039020600081548110611b4d57611b4c613883565b5b906000526020600020015482602001818152505060006005604051611b729190613401565b908152602001604051809103902086604051611b8e91906133ea565b9081526020016040518091039020600181548110611baf57611bae613883565b5b90600052602060002001548260a0018181525050600082606001516064611bd6919061367b565b86868560000151611be7919061367b565b611bf1919061367b565b611bfb919061364a565b90506000836020015184606001516064611c15919061367b565b611c1f919061367b565b87868660a001518760000151611c35919061367b565b611c3f919061367b565b611c49919061367b565b611c53919061364a565b90508160006005604051611c679190613401565b90815260200160405180910390208b604051611c8391906133ea565b9081526020016040518091039020600081548110611ca457611ca3613883565b5b906000526020600020016000828254611cbd91906136d5565b925050819055508660006005604051611cd69190613401565b90815260200160405180910390208b604051611cf291906133ea565b9081526020016040518091039020600181548110611d1357611d12613883565b5b906000526020600020016000828254611d2c91906135f4565b925050819055508660008b604051611d4491906133ea565b90815260200160405180910390206005604051611d619190613401565b9081526020016040518091039020600081548110611d8257611d81613883565b5b906000526020600020016000828254611d9b91906135f4565b925050819055508160008b604051611db391906133ea565b90815260200160405180910390206005604051611dd09190613401565b9081526020016040518091039020600181548110611df157611df0613883565b5b906000526020600020016000828254611e0a91906136d5565b925050819055508060006005604051611e239190613401565b908152602001604051809103902089604051611e3f91906133ea565b9081526020016040518091039020600181548110611e6057611e5f613883565b5b906000526020600020016000828254611e7991906136d5565b9250508190555080600089604051611e9191906133ea565b90815260200160405180910390206005604051611eae9190613401565b9081526020016040518091039020600081548110611ecf57611ece613883565b5b906000526020600020016000828254611ee891906136d5565b9250508190555081600381905550806004819055505050612bf8565b6005604051602001611f169190613401565b6040516020818303038152906040528051906020012086604051602001611f3d91906133ea565b6040516020818303038152906040528051906020012014156124105760006005604051611f6a9190613401565b908152602001604051809103902088604051611f8691906133ea565b9081526020016040518091039020600081548110611fa757611fa6613883565b5b906000526020600020015482600001818152505060006005604051611fcc9190613401565b908152602001604051809103902088604051611fe891906133ea565b908152602001604051809103902060018154811061200957612008613883565b5b9060005260206000200154826060018181525050600080600560405161202f9190613401565b90815260200160405180910390208860405161204b91906133ea565b908152602001604051809103902060008154811061206c5761206b613883565b5b90600052602060002001549050600080600560405161208b9190613401565b9081526020016040518091039020896040516120a791906133ea565b90815260200160405180910390206001815481106120c8576120c7613883565b5b906000526020600020015490506000846060015160646120e8919061367b565b888787600001516120f9919061367b565b612103919061367b565b61210d919061364a565b905060008386606001516064612123919061367b565b61212d919061367b565b898985896000015161213f919061367b565b612149919061367b565b612153919061367b565b61215d919061364a565b905081600060056040516121719190613401565b90815260200160405180910390208d60405161218d91906133ea565b90815260200160405180910390206000815481106121ae576121ad613883565b5b9060005260206000200160008282546121c791906136d5565b9250508190555088600060056040516121e09190613401565b90815260200160405180910390208d6040516121fc91906133ea565b908152602001604051809103902060018154811061221d5761221c613883565b5b90600052602060002001600082825461223691906135f4565b925050819055508860008d60405161224e91906133ea565b9081526020016040518091039020600560405161226b9190613401565b908152602001604051809103902060008154811061228c5761228b613883565b5b9060005260206000200160008282546122a591906135f4565b925050819055508160008d6040516122bd91906133ea565b908152602001604051809103902060056040516122da9190613401565b90815260200160405180910390206001815481106122fb576122fa613883565b5b90600052602060002001600082825461231491906136d5565b92505081905550806000600560405161232d9190613401565b90815260200160405180910390208c60405161234991906133ea565b908152602001604051809103902060018154811061236a57612369613883565b5b90600052602060002001600082825461238391906136d5565b925050819055508060008c60405161239b91906133ea565b908152602001604051809103902060056040516123b89190613401565b90815260200160405180910390206000815481106123d9576123d8613883565b5b9060005260206000200160008282546123f291906136d5565b92505081905550806003819055508160048190555050505050612bf7565b600060056040516124219190613401565b90815260200160405180910390208860405161243d91906133ea565b908152602001604051809103902060008154811061245e5761245d613883565b5b9060005260206000200154826000018181525050600060056040516124839190613401565b90815260200160405180910390208860405161249f91906133ea565b90815260200160405180910390206001815481106124c0576124bf613883565b5b9060005260206000200154826060018181525050600060056040516124e59190613401565b90815260200160405180910390208760405161250191906133ea565b908152602001604051809103902060008154811061252257612521613883565b5b9060005260206000200154826020018181525050600060056040516125479190613401565b90815260200160405180910390208760405161256391906133ea565b908152602001604051809103902060018154811061258457612583613883565b5b9060005260206000200154826080018181525050600060056040516125a99190613401565b9081526020016040518091039020866040516125c591906133ea565b90815260200160405180910390206000815481106125e6576125e5613883565b5b90600052602060002001548260400181815250506000600560405161260b9190613401565b90815260200160405180910390208660405161262791906133ea565b908152602001604051809103902060018154811061264857612647613883565b5b90600052602060002001548260a001818152505060008260000151858761266f919061367b565b612679919061367b565b9050826020015183606001516064612691919061367b565b61269b919061367b565b8360800151826126ab919061367b565b6126b5919061364a565b90506000836000015185886126ca919061367b565b6126d4919061367b565b90508360400151846060015160646126ec919061367b565b6126f6919061367b565b8460a0015182612706919061367b565b612710919061364a565b905060008790506127e46005805461272790613793565b80601f016020809104026020016040519081016040528092919081815260200182805461275390613793565b80156127a05780601f10612775576101008083540402835291602001916127a0565b820191906000526020600020905b81548152906001019060200180831161278357829003601f168201915b50505050508c8360016040518060400160405280600381526020017f6164640000000000000000000000000000000000000000000000000000000000815250612cc1565b6128b18b600580546127f590613793565b80601f016020809104026020016040519081016040528092919081815260200182805461282190613793565b801561286e5780601f106128435761010080835404028352916020019161286e565b820191906000526020600020905b81548152906001019060200180831161285157829003601f168201915b50505050508360006040518060400160405280600381526020017f6164640000000000000000000000000000000000000000000000000000000000815250612cc1565b61297e600580546128c190613793565b80601f01602080910402602001604051908101604052809291908181526020018280546128ed90613793565b801561293a5780601f1061290f5761010080835404028352916020019161293a565b820191906000526020600020905b81548152906001019060200180831161291d57829003601f168201915b50505050508b8560016040518060400160405280600381526020017f7375620000000000000000000000000000000000000000000000000000000000815250612cc1565b612a4b8a6005805461298f90613793565b80601f01602080910402602001604051908101604052809291908181526020018280546129bb90613793565b8015612a085780601f106129dd57610100808354040283529160200191612a08565b820191906000526020600020905b8154815290600101906020018083116129eb57829003601f168201915b50505050508560006040518060400160405280600381526020017f7375620000000000000000000000000000000000000000000000000000000000815250612cc1565b612b1860058054612a5b90613793565b80601f0160208091040260200160405190810160405280929190818152602001828054612a8790613793565b8015612ad45780601f10612aa957610100808354040283529160200191612ad4565b820191906000526020600020905b815481529060010190602001808311612ab757829003601f168201915b50505050508a8460016040518060400160405280600381526020017f7375620000000000000000000000000000000000000000000000000000000000815250612cc1565b612be58960058054612b2990613793565b80601f0160208091040260200160405190810160405280929190818152602001828054612b5590613793565b8015612ba25780601f10612b7757610100808354040283529160200191612ba2565b820191906000526020600020905b815481529060010190602001808311612b8557829003601f168201915b50505050508460006040518060400160405280600381526020017f7375620000000000000000000000000000000000000000000000000000000000815250612cc1565b82600381905550816004819055505050505b5b505b50505050505050565b6000600182604051612c1591906133ea565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b565b600083805160208101820180518482526020830160208501208183528095505050505050828051602081018201805184825260208301602085012081835280955050505050508181548110612ca157600080fd5b9060005260206000200160009250925050505481565b6000600254905090565b604051602001612cd090613418565b6040516020818303038152906040528051906020012081604051602001612cf791906133ea565b604051602081830303815290604052805190602001201415612d855782600086604051612d2491906133ea565b908152602001604051809103902085604051612d4091906133ea565b90815260200160405180910390208381548110612d6057612d5f613883565b5b906000526020600020016000828254612d7991906135f4565b92505081905550612df3565b82600086604051612d9691906133ea565b908152602001604051809103902085604051612db291906133ea565b90815260200160405180910390208381548110612dd257612dd1613883565b5b906000526020600020016000828254612deb91906136d5565b925050819055505b5050505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000612e65612e608461354f565b61352a565b905082815260208101848484011115612e8157612e806138e6565b5b612e8c848285613751565b509392505050565b600081359050612ea381613a1f565b92915050565b600081519050612eb881613a36565b92915050565b600082601f830112612ed357612ed26138e1565b5b8135612ee3848260208601612e52565b91505092915050565b600081359050612efb81613a4d565b92915050565b60008060008060808587031215612f1b57612f1a6138f0565b5b6000612f2987828801612e94565b9450506020612f3a87828801612eec565b9350506040612f4b87828801612eec565b925050606085013567ffffffffffffffff811115612f6c57612f6b6138eb565b5b612f7887828801612ebe565b91505092959194509250565b600060208284031215612f9a57612f996138f0565b5b6000612fa884828501612ea9565b91505092915050565b600060208284031215612fc757612fc66138f0565b5b600082013567ffffffffffffffff811115612fe557612fe46138eb565b5b612ff184828501612ebe565b91505092915050565b60008060008060008060c08789031215613017576130166138f0565b5b600087013567ffffffffffffffff811115613035576130346138eb565b5b61304189828a01612ebe565b965050602087013567ffffffffffffffff811115613062576130616138eb565b5b61306e89828a01612ebe565b955050604087013567ffffffffffffffff81111561308f5761308e6138eb565b5b61309b89828a01612ebe565b94505060606130ac89828a01612eec565b93505060806130bd89828a01612eec565b92505060a06130ce89828a01612eec565b9150509295509295509295565b6000806000606084860312156130f4576130f36138f0565b5b600084013567ffffffffffffffff811115613112576131116138eb565b5b61311e86828701612ebe565b935050602084013567ffffffffffffffff81111561313f5761313e6138eb565b5b61314b86828701612ebe565b925050604061315c86828701612eec565b9150509250925092565b6000806040838503121561317d5761317c6138f0565b5b600083013567ffffffffffffffff81111561319b5761319a6138eb565b5b6131a785828601612ebe565b92505060206131b885828601612eec565b9150509250929050565b6000602082840312156131d8576131d76138f0565b5b60006131e684828501612eec565b91505092915050565b60006131fb83836133cc565b60208301905092915050565b61321081613709565b82525050565b61321f8161359f565b61322981846135c2565b925061323482613580565b8060005b8381101561326557815161324c87826131ef565b9650613257836135b5565b925050600181019050613238565b505050505050565b6000613278826135aa565b61328281856135e9565b9350613292818560208601613760565b80840191505092915050565b600081546132ab81613793565b6132b581866135e9565b945060018216600081146132d057600181146132e157613314565b60ff19831686528186019350613314565b6132ea8561358a565b60005b8381101561330c578154818901526001820191506020810190506132ed565b838801955050505b50505092915050565b600061332a6003836135e9565b915061333582613906565b600382019050919050565b600061334d6022836135d8565b91506133588261392f565b604082019050919050565b60006133706024836135d8565b915061337b8261397e565b604082019050919050565b60006133936027836135d8565b915061339e826139cd565b604082019050919050565b60006133b66000836135cd565b91506133c182613a1c565b600082019050919050565b6133d581613747565b82525050565b6133e481613747565b82525050565b60006133f6828461326d565b915081905092915050565b600061340d828461329e565b915081905092915050565b60006134238261331d565b9150819050919050565b6000613438826133a9565b9150819050919050565b60006020820190506134576000830184613207565b92915050565b60006060820190506134726000830186613207565b61347f6020830185613207565b61348c60408301846133db565b949350505050565b60006040820190506134a96000830184613216565b92915050565b600060208201905081810360008301526134c881613340565b9050919050565b600060208201905081810360008301526134e881613363565b9050919050565b6000602082019050818103600083015261350881613386565b9050919050565b600060208201905061352460008301846133db565b92915050565b6000613534613545565b905061354082826137c5565b919050565b6000604051905090565b600067ffffffffffffffff82111561356a576135696138b2565b5b613573826138f5565b9050602081019050919050565b6000819050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006135ff82613747565b915061360a83613747565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561363f5761363e6137f6565b5b828201905092915050565b600061365582613747565b915061366083613747565b9250826136705761366f613825565b5b828204905092915050565b600061368682613747565b915061369183613747565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156136ca576136c96137f6565b5b828202905092915050565b60006136e082613747565b91506136eb83613747565b9250828210156136fe576136fd6137f6565b5b828203905092915050565b600061371482613727565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561377e578082015181840152602081019050613763565b8381111561378d576000848401525b50505050565b600060028204905060018216806137ab57607f821691505b602082108114156137bf576137be613854565b5b50919050565b6137ce826138f5565b810181811067ffffffffffffffff821117156137ed576137ec6138b2565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6164640000000000000000000000000000000000000000000000000000000000600082015250565b7f43616e6e6f7420637265617465206120706f6f6c2077697468203020746f6b6560008201527f6e73000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c697175696469747920666f72207468697320746f6b656e206e6f742070726560008201527f73656e7400000000000000000000000000000000000000000000000000000000602082015250565b7f4c697175696469747920666f72207468697320746f6b656e206973206e6f742060008201527f70726573656e7400000000000000000000000000000000000000000000000000602082015250565b50565b613a2881613709565b8114613a3357600080fd5b50565b613a3f8161371b565b8114613a4a57600080fd5b50565b613a5681613747565b8114613a6157600080fd5b5056fea264697066735822122023d454cc43b9bf3a18fd701fb31c3a3b187fba22ad86330738b0f3c66f90f5ff64736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 721,
        "contract": "contracts/Multiswap.sol:Multiswap",
        "label": "liquidityPools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 725,
        "contract": "contracts/Multiswap.sol:Multiswap",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 727,
        "contract": "contracts/Multiswap.sol:Multiswap",
        "label": "symbol_to_return",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 729,
        "contract": "contracts/Multiswap.sol:Multiswap",
        "label": "symbol2_to_return",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 731,
        "contract": "contracts/Multiswap.sol:Multiswap",
        "label": "symbol3_to_return",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 734,
        "contract": "contracts/Multiswap.sol:Multiswap",
        "label": "eth",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}